// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("STUDENT")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  accounts      Account[]
  sessions      Session[]

  // Student specific
  enrollments   Enrollment[]    @relation("StudentEnrollments")
  progress      CourseProgress[]

  // Tutor specific
  bio           String?
  expertise     String?
  courses       Course[]        @relation("TutorCourses")

  // Chat & Messages
  messages      Message[]
  chatSessions  ChatSession[]   @relation("ChatParticipants")
}

// Auth Models (NextAuth)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Course Models
model Course {
  id          String    @id @default(cuid())
  title       String
  description String
  longDescription String?
  thumbnail   String?
  price       Float?
  duration    String?
  tutorId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tutor       User      @relation("TutorCourses", fields: [tutorId], references: [id])
  videos      Video[]
  enrollments Enrollment[]
  progress    CourseProgress[]
  tags        CourseTag[]
  chatSession ChatSession?
}

model Video {
  id          String    @id @default(cuid())
  title       String
  description String?
  url         String
  thumbnailUrl String?
  duration    String?
  position    Int       // Order in the course
  courseId    String
  transcriptId String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  transcript  Transcript? @relation(fields: [transcriptId], references: [id])
  progress    VideoProgress[]
}

model Transcript {
  id          String    @id @default(cuid())
  content     String

  createdAt   DateTime  @default(now())

  // Relations
  video       Video[]
}

model Enrollment {
  id          String    @id @default(cuid())
  studentId   String
  courseId    String
  enrolledAt  DateTime  @default(now())

  // Relations
  student     User      @relation("StudentEnrollments", fields: [studentId], references: [id])
  course      Course    @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
}

model CourseProgress {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  progress    Float     @default(0) // 0-100 percentage
  lastAccessed DateTime @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  course      Course    @relation(fields: [courseId], references: [id])
  videoProgress VideoProgress[]

  @@unique([userId, courseId])
}

model VideoProgress {
  id              String    @id @default(cuid())
  videoId         String
  progressId      String
  completed       Boolean   @default(false)
  watchedSeconds  Int       @default(0)
  lastPosition    Int       @default(0) // seconds
  updatedAt       DateTime  @updatedAt

  // Relations
  video           Video     @relation(fields: [videoId], references: [id])
  courseProgress  CourseProgress @relation(fields: [progressId], references: [id])

  @@unique([videoId, progressId])
}

model CourseTag {
  id        String  @id @default(cuid())
  name      String
  courseId  String

  // Relations
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([name, courseId])
}

// Chat Models
model ChatSession {
  id        String    @id @default(cuid())
  courseId  String    @unique // Each course has one chat session
  createdAt DateTime  @default(now())

  // Relations
  course    Course    @relation(fields: [courseId], references: [id])
  messages  Message[]
  participants User[]  @relation("ChatParticipants")
}

model Message {
  id            String    @id @default(cuid())
  content       String
  userId        String
  chatSessionId String
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id])
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}
